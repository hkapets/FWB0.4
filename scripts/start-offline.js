#!/usr/bin/env node

const { spawn } = require("child_process");
const path = require("path");
const fs = require("fs");

console.log("üöÄ –ó–∞–ø—É—Å–∫ Fantasy World Builder –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ...");

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –¥–∞–Ω–∏—Ö —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
const dataDir = path.join(process.cwd(), "data");
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
  console.log("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –¥–∞–Ω–∏—Ö:", dataDir);
}

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—É
process.env.NODE_ENV = "production";
process.env.APP_MODE = "offline";
process.env.STORAGE_TYPE = "sqlite";
process.env.SQLITE_PATH = path.join(dataDir, "offline-worlds.db");
process.env.AI_PROVIDER = "ollama";
process.env.OLLAMA_URL = "http://localhost:11434";
process.env.PORT = "3001";

console.log("‚öôÔ∏è  –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:");
console.log("   - –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è: SQLite");
console.log("   - –®–Ü: Ollama (–ª–æ–∫–∞–ª—å–Ω–∏–π)");
console.log("   - –ü–æ—Ä—Ç: 3001");
console.log("   - –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:", process.env.SQLITE_PATH);

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Ollama
const checkOllama = spawn("curl", ["-f", "http://localhost:11434/api/tags"], {
  stdio: "pipe",
});

checkOllama.on("error", () => {
  console.log(
    "‚ö†Ô∏è  Ollama –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Ollama –æ–∫—Ä–µ–º–æ –¥–ª—è –®–Ü —Ñ—É–Ω–∫—Ü—ñ–π."
  );
  console.log("   –ö–æ–º–∞–Ω–¥–∞: ollama serve");
});

checkOllama.on("close", (code) => {
  if (code === 0) {
    console.log("‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏");
  } else {
    console.log("‚ö†Ô∏è  Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –®–Ü —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.");
  }

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
  startServer();
});

function startServer() {
  console.log("üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...");

  const server = spawn("node", ["dist/index.js"], {
    stdio: "inherit",
    env: process.env,
  });

  server.on("error", (error) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:", error);
    process.exit(1);
  });

  server.on("close", (code) => {
    console.log(`\nüëã –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ –∑ –∫–æ–¥–æ–º: ${code}`);
    process.exit(code);
  });

  // –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  process.on("SIGINT", () => {
    console.log("\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...");
    server.kill("SIGINT");
  });

  process.on("SIGTERM", () => {
    console.log("\nüõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è...");
    server.kill("SIGTERM");
  });
}

console.log("üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:");
console.log("   1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3001");
console.log("   2. –î–ª—è –®–Ü —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ø—É—Å—Ç—ñ—Ç—å: ollama serve");
console.log("   3. –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C");
