#!/usr/bin/env node

const { spawn } = require("child_process");
const fs = require("fs");
const path = require("path");

console.log("üß™ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç Fantasy World Builder...\n");

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js –≤–µ—Ä—Å—ñ—ó
const nodeVersion = process.version;
console.log(`‚úÖ Node.js –≤–µ—Ä—Å—ñ—è: ${nodeVersion}`);

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ package.json
if (fs.existsSync("package.json")) {
  console.log("‚úÖ package.json –∑–Ω–∞–π–¥–µ–Ω–æ");
} else {
  console.log("‚ùå package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
  process.exit(1);
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
const requiredFiles = [
  "server/index.ts",
  "client/src/App.tsx",
  "shared/schema.ts",
  "vite.config.ts",
];

requiredFiles.forEach((file) => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} –∑–Ω–∞–π–¥–µ–Ω–æ`);
  } else {
    console.log(`‚ùå ${file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
console.log("\nüì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...");
const checkDeps = spawn("npm", ["list", "--depth=0"], { stdio: "pipe" });

checkDeps.on("close", (code) => {
  if (code === 0) {
    console.log("‚úÖ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ");
  } else {
    console.log("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm install");
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript
  checkTypeScript();
});

function checkTypeScript() {
  console.log("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TypeScript...");
  const checkTS = spawn("npx", ["tsc", "--noEmit"], { stdio: "pipe" });

  checkTS.on("close", (code) => {
    if (code === 0) {
      console.log("‚úÖ TypeScript –∫–æ–º–ø—ñ–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
    } else {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∏ TypeScript");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±—ñ—Ä–∫–∏
    checkBuild();
  });
}

function checkBuild() {
  console.log("\nüèóÔ∏è  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±—ñ—Ä–∫–∏...");
  const build = spawn("npm", ["run", "build"], { stdio: "pipe" });

  build.on("close", (code) => {
    if (code === 0) {
      console.log("‚úÖ –ó–±—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞");
    } else {
      console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±—ñ—Ä–∫–∏");
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Ollama
    checkOllama();
  });
}

function checkOllama() {
  console.log("\nü§ñ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Ollama...");
  const checkOllama = spawn("curl", ["-f", "http://localhost:11434/api/tags"], {
    stdio: "pipe",
  });

  checkOllama.on("error", () => {
    console.log("‚ö†Ô∏è  Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π");
    console.log("   –î–ª—è –®–Ü —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ø—É—Å—Ç—ñ—Ç—å: ollama serve");
  });

  checkOllama.on("close", (code) => {
    if (code === 0) {
      console.log("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∏–π");
    } else {
      console.log("‚ö†Ô∏è  Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π");
    }

    // –§—ñ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    showRecommendations();
  });
}

function showRecommendations() {
  console.log("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∑–∞–ø—É—Å–∫—É:");
  console.log("");
  console.log("1. –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π):");
  console.log("   npm run start:offline");
  console.log("");
  console.log("2. Docker (–Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–∏–π):");
  console.log("   docker-compose up -d");
  console.log("");
  console.log("3. Development —Ä–µ–∂–∏–º:");
  console.log("   npm run dev");
  console.log("");
  console.log("4. –î–ª—è –®–Ü —Ñ—É–Ω–∫—Ü—ñ–π:");
  console.log("   ollama serve");
  console.log("   ollama pull mistral");
  console.log("");
  console.log("üåê –î–æ—Å—Ç—É–ø: http://localhost:3001 (–∞–±–æ 8080 –¥–ª—è Docker)");
  console.log("");
  console.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}
